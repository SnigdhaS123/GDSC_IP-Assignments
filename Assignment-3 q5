struct Node {
    int data;
    Node* next;
    Node* prev;
    
    Node(int value) : data(value), next(nullptr), prev(nullptr) {}
};

Node* reverseDoublyLinkedList(Node* head) {
    Node* current = head;
    Node* temp = nullptr;
    
    while (current != nullptr) {
     
        temp = current->prev;
        current->prev = current->next;
        current->next = temp;
       
        current = current->prev;
    }
    
    if (temp != nullptr) {
        head = temp->prev;
    }
    return head;
}

void printDoublyLinkedList(Node* head) {
    while (head != nullptr) {
        std::cout << head->data << " ";
        head = head->next;
    }
    std::cout << std::endl;
}

int main() {
    // Creating a sample doubly linked list
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->prev = head;
    head->next->next = new Node(3);
    head->next->next->prev = head->next;
    
    std::cout << "Original Doubly Linked List: ";
    printDoublyLinkedList(head);
    
    head = reverseDoublyLinkedList(head);
    
    std::cout << "Reversed Doubly Linked List: ";
    printDoublyLinkedList(head);
    
    while (head != nullptr) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
    
    return 0;
}
